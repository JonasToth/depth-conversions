---
stages:
    - compilers
    - sanitizers
    - platforms
    - images

.cache_download_third_party: &cache_download_third_party_definition
  cache:
    key: source-third-party
    paths:
      - build/third_party/opencv/**/*
      - build/third_party/eigen3/**/*

.code_change_filter: &code_change_filter_definition
  changes:
    - cmake/*
    - src/**/*
    - third_party/**/*

.binary_artifacts: &binary_artifact_paths
  artifacts:
    name: "$CI_BUILD_ID-$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - build/src/apps/depth2x

api-documentation:
  image: $CI_REGISTRY_IMAGE/base-image-documentation
  stage: compilers
  script:
    - ./scripts/ci/generate_doc.bash
  only:
    refs:
      - master
  cache:
    key: doxygen-output
    paths:
      - public/**/*
  artifacts:
    paths:
      - public

coverage:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  script:
    - ./scripts/ci/coverage_build.bash
  only:
    refs:
      - master
      - merge_requests
  tags:
    - docker

ubuntu-1804-clang-8:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "clang-8"
    CXX: "clang++-8"
    LD: "lld-8"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-clang-9:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "OFF"
    WITH_BENCHMARK: "ON"
    WITH_BENCHMARK_JUNIT_REPORT: "ON"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  artifacts:
    reports:
      junit:
        - build/src/benchmarks/bm_*.xml
  tags:
    - docker

ubuntu-1804-clang-9-libcxx:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "ON"
    FORCE_BUNDLED_CV: "ON"
    CUSTOM_OPENCV_SOURCE: "/opencv/opencv"
    CUSTOM_OPENCV_CONTRIB_SOURCE: "/opencv/opencv_contrib/modules"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_STATIC_STDCXXLIB: "OFF"
    WITH_IPO: "OFF"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *cache_download_third_party_definition
  tags:
    - docker
    - test
    - benchmark

ubuntu-1804-clang-9-static-libcxx-lto:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "ON"
    FORCE_BUNDLED_CV: "ON"
    CUSTOM_OPENCV_SOURCE: "/opencv/opencv"
    CUSTOM_OPENCV_CONTRIB_SOURCE: "/opencv/opencv_contrib/modules"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "ON"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  <<: *cache_download_third_party_definition
  tags:
    - docker
    - test
    - benchmark

ubuntu-1804-gcc-7:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "gcc-7"
    CXX: "g++-7"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-gcc-8:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "gcc-8"
    CXX: "g++-8"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-gcc-9:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
    WITH_BENCHMARK: "ON"
    WITH_BENCHMARK_JUNIT_REPORT: "ON"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  artifacts:
    reports:
      junit:
        - build/src/benchmarks/bm_*.xml
  tags:
    - docker

ubuntu-1804-gcc-9-lto-static:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
    FORCE_BUNDLED_CV: "ON"
    CUSTOM_OPENCV_SOURCE: "/opencv/opencv"
    CUSTOM_OPENCV_CONTRIB_SOURCE: "/opencv/opencv_contrib/modules"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "ON"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  <<: *cache_download_third_party_definition
  tags:
    - docker
    - test
    - benchmark

clang-tidy-analysis:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: compilers
  script:
    - mkdir -p build && cd build
    - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=OFF -DWITH_TESTING=OFF -DWITH_CONTRACT_EXCEPTION=OFF -DWITH_BENCHMARK=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - cd .. && ln -s build/compile_commands.json && cd src/
    - run-clang-tidy-9 -header-filter=sens_loc/* include/ apps/ lib/
  only:
    refs:
      - master
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

.wide_testing_filter: &wide_test_filter_definition
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition

ubuntu-1804-asan:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: sanitizers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "clang++-9"
    BUILD_TYPE: "RelWithDebInfo"
    WITH_ASAN: "ON"
  <<: *wide_test_filter_definition
  dependencies: []
  tags:
    - docker

ubuntu-1804-ubsan:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: sanitizers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "clang++-9"
    BUILD_TYPE: "RelWithDebInfo"
    WITH_UBSAN: "ON"
  <<: *wide_test_filter_definition
  dependencies: []
  tags:
    - docker

ubuntu-1804-tsan:
  image: $CI_REGISTRY_IMAGE/base-image-tools
  stage: sanitizers
  allow_failure: true
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "clang++-9"
    BUILD_TYPE: "RelWithDebInfo"
    WITH_TSAN: "ON"
  <<: *wide_test_filter_definition
  dependencies: []
  tags:
    - docker

.platform_build_options: &platform_build_option_variables
  variables:
    BUILD_TYPE: "RelWithDebInfo"
    WITH_IPO: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    CC: "gcc-9"
    CXX: "g++-9"

old-linux-most-portable:
  image: $CI_REGISTRY_IMAGE/base-image-old-linux
  stage: platforms
  dependencies: []
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
    WITH_TESTING: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "ON"
    WITH_SSE42: "ON"
    WITH_AVX2: "OFF"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  tags:
    - docker
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths

roskinetic-image:
  image: $CI_REGISTRY_IMAGE/base-image-roskinetic
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

rosmelodic-image:
  image: $CI_REGISTRY_IMAGE/base-image-rosmelodic
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

ubuntu-rolling-image:
  image: $CI_REGISTRY_IMAGE/base-image-ubuntu-rolling
  allow_failure: true
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

alpine-edge-image:
  image: $CI_REGISTRY_IMAGE/base-image-alpine-edge
  stage: platforms
  dependencies: []
  variables:
    CC: "gcc"
    CXX: "g++"
    WITH_TESTING: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "OFF"
    WITH_SSE42: "ON"
    WITH_AVX2: "OFF"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  tags:
    - docker
    - platform
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths

create-production-image:
  stage: images
  image: docker:git
  services:
    - docker:dind
  dependencies: ["old-linux-most-portable"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd docker/.production
    - mv ../../build/src/apps/* .
    - docker build --pull -t $CI_REGISTRY_IMAGE .
    - docker run --rm $CI_REGISTRY_IMAGE:latest depth2x -h
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  tags:
    - docker-in-docker

create-alpine-image:
  stage: images
  image: docker:git
  services:
    - docker:dind
  dependencies: ["alpine-edge-image"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd docker/.alpine-edge
    - mv ../../build/src/apps/* .
    - docker build --pull -t $CI_REGISTRY_IMAGE:alpine-edge .
    - docker run --rm $CI_REGISTRY_IMAGE:alpine-edge depth2x -h
    - docker push $CI_REGISTRY_IMAGE:alpine-edge
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  tags:
    - docker-in-docker
