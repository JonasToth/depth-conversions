---
stages:
    - compilers
    - sanitizers
    - platforms

.code_change_filter: &code_change_filter_definition
  changes:
    - cmake/*
    - src/**/*
    - third_party/**/*

.binary_artifacts: &binary_artifact_paths
  artifacts:
    name: "$CI_BUILD_ID-$CI_JOB_NAME"
    paths:
      - build/src/apps/depth2x
    expire_in: 4 week

coverage:
  image: base-image-tools
  stage: compilers
  script:
    - ./scripts/ci/coverage_build.bash
  only:
    refs:
      - master
      - merge_requests
  tags:
    - docker

ubuntu-1804-clang-8:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "clang-8"
    CXX: "clang++-8"
    LD: "lld-8"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-clang-9:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "OFF"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-clang-9-libcxx:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "ON"
    FORCE_BUNDLED_CV: "ON"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_BENCHMARK: "ON"
    WITH_STATIC_STDCXXLIB: "OFF"
    WITH_IPO: "OFF"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  tags:
    - docker
    - test
    - benchmark

ubuntu-1804-clang-9-libcxx-lto:
  image: base-image-tools
  stage: compilers
  allow_failure: true
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "ON"
    FORCE_BUNDLED_CV: "ON"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_BENCHMARK: "ON"
    WITH_STATIC_STDCXXLIB: "OFF"
    WITH_IPO: "ON"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  tags:
    - docker
    - test
    - benchmark

ubuntu-1804-clang-9-static-libcxx-lto:
  image: base-image-tools
  stage: compilers
  allow_failure: true
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "lld-9"
    USE_LIBCXX: "ON"
    FORCE_BUNDLED_CV: "ON"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_BENCHMARK: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "ON"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  tags:
    - docker
    - test
    - benchmark

ubuntu-1804-gcc-7:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "gcc-7"
    CXX: "g++-7"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-gcc-8:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "gcc-8"
    CXX: "g++-8"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-gcc-9:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

ubuntu-1804-gcc-9-static:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
    FORCE_BUNDLED_CV: "ON"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_BENCHMARK: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "OFF"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  tags:
    - docker
    - test
    - benchmark

ubuntu-1804-gcc-9-lto-static:
  image: base-image-tools
  stage: compilers
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
    FORCE_BUNDLED_CV: "ON"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_BENCHMARK: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "ON"
    BUILD_TYPE: "Release"
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition
  <<: *binary_artifact_paths
  tags:
    - docker
    - test
    - benchmark

clang-tidy-analysis:
  image: base-image-tools
  stage: compilers
  script:
    - mkdir -p build && cd build
    - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=OFF -DWITH_TESTING=OFF -DWITH_CONTRACT_EXCEPTION=OFF -DWITH_BENCHMARK=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - cd .. && ln -s build/compile_commands.json && cd src/
    - run-clang-tidy-9 -header-filter=sens_loc/* include/ apps/ lib/
  only:
    refs:
      - master
      - merge_requests
    <<: *code_change_filter_definition
  tags:
    - docker

.wide_testing_filter: &wide_test_filter_definition
  script:
    - ./scripts/ci/normal_build.bash
  only:
    refs:
      - master
    <<: *code_change_filter_definition

ubuntu-1804-asan:
  image: base-image-tools
  stage: sanitizers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "clang++-9"
    BUILD_TYPE: "RelWithDebInfo"
    WITH_ASAN: "ON"
  <<: *wide_test_filter_definition
  dependencies: []
  tags:
    - docker

ubuntu-1804-ubsan:
  image: base-image-tools
  stage: sanitizers
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "clang++-9"
    BUILD_TYPE: "RelWithDebInfo"
    WITH_UBSAN: "ON"
  <<: *wide_test_filter_definition
  dependencies: []
  tags:
    - docker

ubuntu-1804-tsan:
  image: base-image-tools
  stage: sanitizers
  allow_failure: true
  variables:
    CC: "clang-9"
    CXX: "clang++-9"
    LD: "clang++-9"
    BUILD_TYPE: "RelWithDebInfo"
    WITH_TSAN: "ON"
  <<: *wide_test_filter_definition
  dependencies: []
  tags:
    - docker

.platform_build_options: &platform_build_option_variables
  variables:
    BUILD_TYPE: "RelWithDebInfo"
    WITH_IPO: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    CC: "gcc-9"
    CXX: "g++-9"

old-linux-most-portable:
  image: ubuntu:14.04
  stage: platforms
  allow_failure: true
  variables:
    CC: "gcc-9"
    CXX: "g++-9"
    FORCE_BUNDLED_CV: "ON"
    FORCE_BUNDLED_EIGEN: "ON"
    WITH_TESTING: "ON"
    WITH_BENCHMARK: "ON"
    WITH_STATIC_STDCXXLIB: "ON"
    WITH_IPO: "ON"
    BUILD_TYPE: "Release"
  before_script:
    - apt-get update
    - apt-get install -y wget software-properties-common
    - wget --quiet https://github.com/Kitware/CMake/releases/download/v3.15.3/cmake-3.15.3-Linux-x86_64.sh
    - sh cmake-3.15.3-Linux-x86_64.sh --prefix=/usr/local --skip-license
    - add-apt-repository -y ppa:ubuntu-toolchain-r/test
    - apt-get update
    - apt-get install -y g++-9 gcc-9 ninja-build
  script:
    - ./scripts/ci/normal_build.bash
  tags:
    - docker
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths

roskinetic-image:
  image: base-image-roskinetic
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

rosmelodic-image:
  image: base-image-rosmelodic
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

ubuntu1604-image:
  image: base-image-ubuntu1604
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

ubuntu1804-image:
  image: base-image-ubuntu1804
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform

ubuntu-rolling-image:
  image: base-image-ubuntu-rolling
  stage: platforms
  <<: *platform_build_option_variables
  <<: *wide_test_filter_definition
  <<: *binary_artifact_paths
  dependencies: []
  tags:
    - docker
    - platform
