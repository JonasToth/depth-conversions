namespace tf {

/** @page chapter5 C5: Composable Tasking

Composition is a key to improve the programmability of a complex workflow.
This chapter describes how to create a large parallel graph through composition of modular and reusable blocks that are easier to optimize.


@section C5_ComposesATaskflow Composes a Taskflow

A powerful feature of tf::Taskflow is its @em composable interface.
You can break down a large parallel workload into smaller pieces
each designed to run a specific task dependency graph.
This largely facilitates the @em modularity of writing a parallel task program.

@code{.cpp}
 1: // f1 has three independent tasks
 2: tf::Taskflow f1;
 3: f1.name("F1");
 4: tf::Task f1A = f1.emplace([&](){ std::cout << "F1 TaskA\n"; });
 5: tf::Task f1B = f1.emplace([&](){ std::cout << "F1 TaskB\n"; });
 6: tf::Task f1C = f1.emplace([&](){ std::cout << "F1 TaskC\n"; });
 7: 
 8: f1A.name("f1A");
 9: f1B.name("f1B");
10: f1C.name("f1C");
11: f1A.precede(f1C);
12: f1B.precede(f1C);
13:
14: // f2A ---
15: //        |----> f2C ----> f1_module_task ----> f2D
16: // f2B --- 
17: tf::Taskflow f2;
18: f2.name("F2");
19: tf::Task f2A = f2.emplace([&](){ std::cout << "  F2 TaskA\n"; });
20: tf::Task f2B = f2.emplace([&](){ std::cout << "  F2 TaskB\n"; });
21: tf::Task f2C = f2.emplace([&](){ std::cout << "  F2 TaskC\n"; });
22: tf::Task f2D = f2.emplace([&](){ std::cout << "  F2 TaskD\n"; });
23: 
24: f2A.name("f2A");
25: f2B.name("f2B");
26: f2C.name("f2C");
27: f2D.name("f2D");
28:
29: f2A.precede(f2C);
30: f2B.precede(f2C);
31:
32: tf::Task f1_module_task = f2.composed_of(f1).name("module");
33: f2C.precede(f1_module_task);
34: f1_module_task.precede(f2D);
35:
36: f2.dump(std::cout);
@endcode

@image html images/composition_static_1.svg width=40%

Debrief:

@li Line 1-12  creates a taskflow of three tasks f1A, f1B, and f1C with f1A and f1B preceding f1C
@li Line 17-30 creates a taskflow of four tasks f2A, f2B, f2C, and f2D 
@li Line 32 creates a module task from taskflow f1 through the method Taskflow::composed_of
@li Line 33 enforces task f2C to run before the module task 
@li Line 34 enforces the module task to run before task f2D


@section C5_ModuleTask Module Task

The task created from Taskflow::composed_of is a @em module task
that runs on a pre-defined taskflow.
A module task does not owns the taskflow but maintains a soft 
mapping to the taskflow.
You can create multiple module tasks from the same taskflow
but only one module task can run at one time.
For example, the following composition is valid. 
Even though the two module tasks @c module1 and @c module2 refer to the same taskflow @c F1,
the dependency link prevents @c F1 from multiple executions at the same time.

@image html images/composition_static_2.svg width=60%

However, the following composition is @em invalid.
Both module tasks refer to the same taskflow. They can not run at the same time because
they are associated with the same graph.

@image html images/composition_static_invalid.svg width=60%









*/

}

